import string
from torch.utils.data import Dataset
from torch import tensor


class ExeDataset(Dataset):
    def __init__(self, fp_list, label_list, first_n_byte=2000000):
        self.fp_list = fp_list
        self.label_list = label_list
        self.max_size = first_n_byte

    def __len__(self):
        return len(self.fp_list)

    def __getitem__(self, idx):
        with open(self.fp_list[idx], 'r') as f:
            all_data = sum([byte_to_ascii(line) for line in f], [])
            # Padding to 2000000 bytes
            diff_to_pad = self.max_size - len(all_data)
            all_data = all_data + [0] * diff_to_pad if diff_to_pad > 0 else all_data[:self.max_size]
        data, label = tensor(all_data), tensor(int(self.label_list[idx]) - 1)
        return data, label


def byte_to_ascii(line):
    line = line.split()[1:]
    return [int(x, 16) + 1 for x in line if x in string.hexdigits]
